# -*- coding: utf-8 -*-
"""Dynamic transfer characteristic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iX3osnZjA6yOXa0qvN68VaizxdIFzbdp

# *Figure 12 and Figure 12(a)*
"""

# Import libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, r2_score

#  Z1 inductive load
Vin1 = [63, 60, 57, 54, 51]
IL1 = [3.023, 3.021, 3.014, 2.987, 2.937]

#  Z2 inductive load
Vin2 = [63, 60, 57, 54, 51]
IL2 = [3.084, 3.083, 3.074, 3.046, 2.993]

# Concatenate
Vin = Vin1 + Vin2
IL = IL1 + IL2

# Arrays for Z1 and Z2
Z1_Vin = np.array(Vin1)
Z1_IL = np.array(IL1)
Z2_Vin = np.array(Vin2)
Z2_IL = np.array(IL2)

# Polynomial regression model
degree = 3
model = np.polyfit(Vin, IL, degree)

# Current predict for a range of voltages
test_voltages = np.linspace(min(Vin), max(Vin), 50)
predicted_currents = np.polyval(model, test_voltages)

# Plot data and predicted curve

plt.scatter(Z1_Vin, Z1_IL, color='red', label='Z1')
plt.scatter(Z2_Vin, Z2_IL, color='blue', label='Z2')
plt.plot(test_voltages, predicted_currents, color='green')
plt.xlabel('Input voltage (V)')
plt.ylabel('Output current (A)')
plt.title('degree = 3')

plt.show()


# Plot polynomial regression model
plt.figure(figsize=(6,4))
plt.scatter(Z1_Vin, Z1_IL, color='red', label='Z1')
plt.scatter(Z2_Vin, Z2_IL, color='blue', label='Z2')

plt.xlabel('Input voltage (V)')
plt.ylabel('Output current (A)')

plt.legend()

# Find the MSE and correlation coefficient
IL_pred = np.polyval(model, Vin)
mse = mean_squared_error(IL, IL_pred)
corr_coef = np.corrcoef(Vin, IL)[0,1]

# Find the R-squared value
total_sum_squares = np.sum((IL - np.mean(IL))**2)
residual_sum_squares = np.sum((IL - IL_pred)**2)
r_squared = 1 - (residual_sum_squares / total_sum_squares)

# Print the MSE, correlation coefficient, and R-squared value
print('MSE:', mse)
print('Correlation coefficient:', corr_coef)
print('R-squared value:', r_squared)

# Print the coefficients of the polynomial regression model
print('Coefficients:', model)

"""# *Figure 12(b)*"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, r2_score
from scipy.stats import pearsonr

# Input voltage (Vin) and output current (IL)
Vin = np.array([63, 60, 57, 54, 51])
IL = np.array([3.023, 3.021, 3.014, 2.987, 2.937])

# Fit a polynomial regression model
degree = 3
model = np.polyfit(Vin, IL, degree)

# Current predict for a range of voltages
test_voltages = np.linspace(min(Vin), max(Vin), 50)
predicted_currents = np.polyval(model, test_voltages)

# Plot data and predicted curve
corr_coef, _ = pearsonr(IL, np.polyval(model, Vin))
plt.scatter(Vin, IL, color='red')
plt.plot(test_voltages, predicted_currents, color='green')
plt.xlabel('Input voltage (V)')
plt.ylabel('Output current (A)')
plt.title('degree = 3')
plt.text(56.5, 2.98, f'Correlation coefficient = {corr_coef:.0f}')
plt.text(56.5, 2.97, f'R squared = {R2:.0f}')
plt.show()

# Calculate MSE and correlation coefficient
IL_pred = np.polyval(model, Vin)
MSE = mean_squared_error(IL, IL_pred)
corr_coef, _ = pearsonr(IL, IL_pred)
R2 = r2_score(IL, IL_pred)

# Print the coefficients of the polynomial regression model
print('Coefficients:', model)

print(f"Mean squared error = {MSE}")
print(f"Correlation coefficient =  {corr_coef}")
print("R squared = ", R2)