# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ROEnPmgrpmKd5k_8RZKxUYuaD3vTSyjq
"""

# Import libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

# Z1 inductive load
Vin1 = [63, 60, 57, 54, 51]
IL1 = [3.023, 3.021, 3.014, 2.987, 2.937]

# Z2 inductive load
Vin2 = [63, 60, 57, 54, 51]
IL2 = [3.084, 3.083, 3.074, 3.046, 2.993]

# Concatenate
Vin = Vin1 + Vin2
IL = IL1 + IL2

# Reshape
Vin = np.array(Vin).reshape((-1, 1))
IL = np.array(IL)

# Polynomial regression
poly = np.polyfit(Vin.flatten(), IL, 2)
poly_pred = np.polyval(poly, Vin)

# R-squared value
poly_r_squared = r2_score(IL, poly_pred)

# Coefficients and intercept value
a = poly[0]
b = poly[1]
c = poly[2]
print(f"Coefficients: a = {a:.3f}, b = {b:.3f}")
print(f"Intercept: c = {c:.3f}")

# Create linear regression model
reg = LinearRegression().fit(np.array(Vin).reshape(-1, 1), np.array(IL).reshape(-1, 1))
r_squared_linear = r2_score(IL, reg.predict(np.array(Vin).reshape(-1, 1)))

# Plot linear regression model
plt.figure(figsize=(6,5))
plt.plot(Vin, reg.predict(np.array(Vin).reshape(-1, 1)), color='green')
plt.xlabel('Input voltage (V)')
plt.ylabel('Output current (A)')
plt.legend()
plt.text(57.8, 2.98, f' Linear R-squared = {r_squared_linear:.3f}', color='green')

# Plot results
plt.scatter(Vin1, IL1, color='b', marker='+', label='Z1')
plt.scatter(Vin2, IL2, color='r', marker='*', label='Z2')
plt.plot(Vin, poly_pred, color='black')
plt.text(57.8, 2.97, f'Quadratic R-squared = {r_squared_poly:.3f}', color= 'black')
plt.text(57.8, 2.96, f'Coefficient a = {a:.3f}', color= 'black')
plt.text(57.8, 2.95, f'Coefficient b = {b:.3f}', color= 'black')
plt.text(57.8, 2.94, f'Intercept c = {c:.3f}', color= 'black')
plt.xlabel('Input Voltage (V)')
plt.ylabel('Load Current (A)')

plt.legend()
plt.show()



# Import libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.preprocessing import PolynomialFeatures

# Z1 inductive load
Vin1 = [63, 60, 57, 54, 51]
IL1 = [3.023, 3.021, 3.014, 2.987, 2.937]

# Z2 inductive load
Vin2 = [63, 60, 57, 54, 51]
IL2 = [3.084, 3.083, 3.074, 3.046, 2.993]

# Concatenate
Vin = Vin1 + Vin2
IL = IL1 + IL2

# Array for Z1 and Z2
Z1_Vin = np.array(Vin1)
Z1_IL = np.array(IL1)
Z2_Vin = np.array(Vin2)
Z2_IL = np.array(IL2)

# Create linear regression model
reg = LinearRegression().fit(np.array(Vin).reshape(-1, 1), np.array(IL).reshape(-1, 1))
r_squared_linear = r2_score(IL, reg.predict(np.array(Vin).reshape(-1, 1)))

# Create polynomial regression model
poly = PolynomialFeatures(degree=2)
X_poly = poly.fit_transform(np.array(Vin).reshape(-1, 1))
poly_reg = LinearRegression().fit(X_poly, np.array(IL).reshape(-1, 1))
r_squared_poly = r2_score(IL, poly_reg.predict(X_poly))

# Plot linear regression model
plt.figure(figsize=(4,4))
plt.scatter(Z1_Vin, Z1_IL, color='red', label='Z1')
plt.scatter(Z2_Vin, Z2_IL, color='blue', label='Z2')
plt.plot(Vin, reg.predict(np.array(Vin).reshape(-1, 1)), color='green')
plt.xlabel('Input voltage (V)')
plt.ylabel('Output current (A)')

plt.legend()
plt.text(58, 2.98, f'R-squared = {r_squared_linear:.3f}')

# Plot polynomial regression model
plt.figure(figsize=(4,4))
plt.scatter(Z1_Vin, Z1_IL, color='red', label='Z1')
plt.scatter(Z2_Vin, Z2_IL, color='blue', label='Z2')
plt.plot(Vin, poly_reg.predict(poly.fit_transform(np.array(Vin).reshape(-1, 1))), color='green')
plt.xlabel('Input voltage (V)')
plt.ylabel('Output current (A)')

plt.legend()
plt.text(58, 2.98, f'R-squared = {r_squared_poly:.3f}')

plt.show()